Without optimized: 

#include <bits/stdc++.h>
using namespace std;

void insertionSort(int arr[], int n){
    for (int i=1; i<n; i++){ 
        int k= arr[i];
        int j= i-1;
        
        while (j>=0 && k<arr[j]){ 
            arr[j+1]= arr[j]; 
            j--; 
        }
        arr[j+1]= k;
    }
}

int main (){
    
    cout << "enter size: ";
    int n;
    cin >> n;
    
    cout << "enter elements: ";
    int arr[n];
    for (int i=0; i<n; i++)
        cin >> arr[i];
    
    insertionSort(arr, n);
    
    cout << "sorted: ";
    for (int i=0; i<n; i++)
        cout << arr[i] << " ";
        
    return 0;
}


Optimized using binary search (binary insertion sort):

#include <bits/stdc++.h>
using namespace std;

void binaryInsertionSort(int arr[], int n){
    for (int i=1; i<n; i++){ 
        int k= arr[i];
        int l=0, r=i-1;//as key i ke dhorsi.or ager position e sort hobe so already sorted position e searching cholay r change hocche every iteration ar left always 0th index.as key ja pscchi taar aag porjonto shob elements e searching cholbe till while loop stops
        
        while (l<=r){
            int m= (l+r)/2;
            if (arr[m]>k) //desc korte hole > ke < kore dilei hobe
                r= m-1;
            else 
                l= m+1;
        }
        
        for (int j= i-1; j>=l; j--)//arr = [5, 3, 8, 6]: for i=1 if j >= left (since left is 0), and since j = 0, the condition is true. Inside the loop, we perform arr[j + 1] = arr[j], which shifts 5 to the right, making the array look like: arr = [5, 5, 8, 6]. After shifting 5, the loop decrements j to -1. Now the loop condition j >= left fails, so the loop ends. We then insert the key (which is 3) at arr[left], which is at index 0
            arr[j+1]= arr[j];
        
        arr[l]= k;//search kore je position paisi shifting er por oi position e key ke insert kore dibo as key er placement ee khujtesi etokkhon
    }
}

int main (){
    
    cout << "enter size: ";
    int n;
    cin >> n;
    
    cout << "enter elements: ";
    int arr[n];
    for (int i=0; i<n; i++)
        cin >> arr[i];
    
    binaryInsertionSort(arr, n);
    
    cout << "sorted: ";
    for (int i=0; i<n; i++)
        cout << arr[i] << " ";
        
    return 0;
}
